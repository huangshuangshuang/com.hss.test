package com.hss.lucene.test;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Paths;

import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.StringField;
import org.apache.lucene.document.TextField;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopScoreDocCollector;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.util.QueryBuilder;

public class Lucene {
	public static void main(String[] args) {
		File[] files = { new File("C:\\Users\\300002\\Desktop\\笔记本.txt")
				};
		Lucene lucene = new Lucene();
		lucene.create(files);
	}

	public void create(File[] files) {
		IndexWriter indexWriter = null;
		try {

			Analyzer analyzer = new StandardAnalyzer();
			Directory directory = FSDirectory.open(Paths.get("F:/test/eclipse/index"));
			IndexWriterConfig indexWriterConfig = new IndexWriterConfig(analyzer);
			indexWriter = new IndexWriter(directory, indexWriterConfig);
			for (int i = 0; i < files.length; i++) {
				indexWriter.addDocument(addDoc(files[i]));
			}
		} catch (IOException e1) {
			e1.printStackTrace();
		} finally {
			if (indexWriter != null) {
				try {
					indexWriter.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

	}

	public void index() {
		IndexReader reader = null;
		try {
			Analyzer analyzer = new StandardAnalyzer();
			QueryBuilder q = new QueryBuilder(analyzer);
			Query query = q.createBooleanQuery("contents", "2015");
			int hitsPerPage = 10;
			Directory directory = FSDirectory.open(Paths.get("F:/test/eclipse/index"));
			reader = DirectoryReader.open(directory);
			IndexSearcher searcher = new IndexSearcher(reader);
			TopScoreDocCollector collector = TopScoreDocCollector.create(hitsPerPage);
			searcher.search(query, collector);
			ScoreDoc[] hits = collector.topDocs().scoreDocs;
			System.out.println("Found " + hits.length + " hits.");
			for (int i = 0; i < hits.length; i++) {
				int docId = hits[i].doc;
				Document d = searcher.doc(docId);
				System.out.println((i + 1) + ". " + d.get("path") + "\t" + d.get("contents"));
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (reader != null) {
				try {
					reader.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	private Document addDoc(File file) {
		Document doc = new Document();
		doc.add(new StringField("filename", file.getName(), Field.Store.YES));
		doc.add(new StringField("title", file.toString(), Field.Store.YES));
		doc.add(new StringField("time", file.toString(), Field.Store.YES));
		doc.add(new StringField("path", file.toString(), Field.Store.YES));
		try {
			doc.add(new TextField("contents", new FileReader(file)));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		return doc;
	}

}
